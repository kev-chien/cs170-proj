from input_graph_utils import *

if __name__ == '__main__':
    import doctest
    doctest.testmod()

    # input_data = utils.read_file("in/sample_input.in")
    # number_of_kingdoms, list_of_kingdom_names, starting_kingdom, adjacency_matrix = data_parser(input_data)

    # matrixToInputFile("testprint.in", number_of_kingdoms, list_of_kingdom_names, starting_kingdom, adjacency_matrix)


    # test creating kingdomGraph
    # Kevin's 50 kingdoms
    kg = KingdomGraph(50, starting_kingdom="k1", kingdom_names=['k{}'.format(i+1) for i in range(50)])
    
    # kingdom conquer costs
    kg.addConquerCostByName('k1',35)
    kg.addConquerCostByName('k2',3)
    kg.addConquerCostByName('k3',5)
    kg.addConquerCostByName('k4',10)
    kg.addConquerCostByName('k5',60)
    kg.addConquerCostByName('k6',100)
    kg.addConquerCostByName('k7',1)
    kg.addConquerCostByName('k8',10)
    kg.addConquerCostByName('k9',60)
    kg.addConquerCostByName('k10',30)
    kg.addConquerCostByName('k11',30)
    kg.addConquerCostByName('k12',100)
    kg.addConquerCostByName('k13',5)
    kg.addConquerCostByName('k14',20)
    kg.addConquerCostByName('k15',100)
    kg.addConquerCostByName('k16',10)
    kg.addConquerCostByName('k17',60)
    kg.addConquerCostByName('k18',10)
    kg.addConquerCostByName('k19',5)
    kg.addConquerCostByName('k20',90)
    kg.addConquerCostByName('k21',20)
    kg.addConquerCostByName('k22',50)
    kg.addConquerCostByName('k23',50)
    kg.addConquerCostByName('k24',1)
    kg.addConquerCostByName('k25',10)
    kg.addConquerCostByName('k26',100)
    kg.addConquerCostByName('k27',10)
    kg.addConquerCostByName('k28',70)
    kg.addConquerCostByName('k29',80)
    kg.addConquerCostByName('k30',10)
    kg.addConquerCostByName('k31',90)
    kg.addConquerCostByName('k32',20)
    kg.addConquerCostByName('k33',100)
    kg.addConquerCostByName('k34',15)
    kg.addConquerCostByName('k35',10)
    kg.addConquerCostByName('k36',5)
    kg.addConquerCostByName('k37',20)
    kg.addConquerCostByName('k38',10)
    kg.addConquerCostByName('k39',20)
    kg.addConquerCostByName('k40',20)
    kg.addConquerCostByName('k41',30)
    kg.addConquerCostByName('k42',4)
    kg.addConquerCostByName('k43',100)
    kg.addConquerCostByName('k44',1)
    kg.addConquerCostByName('k45',20)
    kg.addConquerCostByName('k46',10)
    kg.addConquerCostByName('k47',30)
    kg.addConquerCostByName('k48',150)
    kg.addConquerCostByName('k49',20)
    kg.addConquerCostByName('k50',10)

    # edge costs
    # northwest
    kg.addEdgeByName('k1','k4',5)
    kg.addEdgeByName('k1','k2',10)
    kg.addEdgeByName('k1','k3',18)
    kg.addEdgeByName('k2','k7',5)
    kg.addEdgeByName('k4','k5',2)
    kg.addEdgeByName('k5','k6',3)
    kg.addEdgeByName('k6','k7',1)
    kg.addEdgeByName('k5','k8',3)
    kg.addEdgeByName('k6','k19',100)
    kg.addEdgeByName('k7','k27',5)
    # north
    kg.addEdgeByName('k8','k9',10)
    kg.addEdgeByName('k8','k13',20)
    kg.addEdgeByName('k8','k11',50)
    kg.addEdgeByName('k9','k10',40)
    kg.addEdgeByName('k10','k13',10)
    kg.addEdgeByName('k12','k13',80)
    kg.addEdgeByName('k11','k12',10)
    kg.addEdgeByName('k10','k14',10)
    # northeast
    kg.addEdgeByName('k14','k15',50)
    kg.addEdgeByName('k15','k16',81)
    kg.addEdgeByName('k15','k17',80)
    kg.addEdgeByName('k16','k17',1)
    kg.addEdgeByName('k14','k18',10)
    kg.addEdgeByName('k18','k21',10)
    kg.addEdgeByName('k21','k23',10)
    kg.addEdgeByName('k23','k26',20)
    kg.addEdgeByName('k26','k25',71)
    kg.addEdgeByName('k25','k24',1)
    kg.addEdgeByName('k24','k22',10)
    kg.addEdgeByName('k22','k20',10)
    kg.addEdgeByName('k20','k18',10)
    kg.addEdgeByName('k20','k19',80)
    # southwest
    kg.addEdgeByName('k27','k29',10)
    kg.addEdgeByName('k29','k30',10)
    kg.addEdgeByName('k30','k31',10)
    kg.addEdgeByName('k31','k33',31)
    kg.addEdgeByName('k29','k32',5)
    kg.addEdgeByName('k32','k33',6)
    kg.addEdgeByName('k27','k28',5)
    kg.addEdgeByName('k28','k33',5)
    kg.addEdgeByName('k33','k34',1)
    # south
    kg.addEdgeByName('k34','k35',5)
    kg.addEdgeByName('k35','k36',3)
    kg.addEdgeByName('k36','k37',2)
    kg.addEdgeByName('k34','k39',10)
    kg.addEdgeByName('k34','k41',4)
    kg.addEdgeByName('k41','k40',15)
    kg.addEdgeByName('k40','k39',1)
    kg.addEdgeByName('k39','k38',3)
    kg.addEdgeByName('k37','k39',5)
    kg.addEdgeByName('k37','k38',7)
    kg.addEdgeByName('k38','k42',10)
    kg.addEdgeByName('k42','k43',2)
    kg.addEdgeByName('k43','k44',2)
    kg.addEdgeByName('k43','k45',2)
    kg.addEdgeByName('k45','k46',5)
    kg.addEdgeByName('k46','k47',4)
    kg.addEdgeByName('k47','k48',3)
    kg.addEdgeByName('k48','k49',5)
    kg.addEdgeByName('k48','k50',2)

    kingdomGraphToInputFile("m50_input.in", kg)

    # test drawing graph
    # drawFromKingdomGraph(kg)